//*    implementation done
//     pub const CLAHE = ?*anyopaque;
//     pub extern fn ArcLength(curve: PointVector, is_closed: bool) f64;
//     pub extern fn ApproxPolyDP(curve: PointVector, epsilon: f64, closed: bool) PointVector;
//     pub extern fn CvtColor(src: Mat, dst: Mat, code: c_int) void;
//     pub extern fn EqualizeHist(src: Mat, dst: Mat) void;
//     pub extern fn CalcHist(mats: struct_Mats, chans: IntVector, mask: Mat, hist: Mat, sz: IntVector, rng: FloatVector, acc: bool) void;
//     pub extern fn CalcBackProject(mats: struct_Mats, chans: IntVector, hist: Mat, backProject: Mat, rng: FloatVector, uniform: bool) void;
//     pub extern fn CompareHist(hist1: Mat, hist2: Mat, method: c_int) f64;
//     pub extern fn ConvexHull(points: PointVector, hull: Mat, clockwise: bool, returnPoints: bool) void;
//     pub extern fn ConvexityDefects(points: PointVector, hull: Mat, result: Mat) void;
//     pub extern fn BilateralFilter(src: Mat, dst: Mat, d: c_int, sc: f64, ss: f64) void;
//     pub extern fn Blur(src: Mat, dst: Mat, ps: Size) void;
//     pub extern fn BoxFilter(src: Mat, dst: Mat, ddepth: c_int, ps: Size) void;
//     pub extern fn SqBoxFilter(src: Mat, dst: Mat, ddepth: c_int, ps: Size) void;
//     pub extern fn Dilate(src: Mat, dst: Mat, kernel: Mat) void;
//     pub extern fn DilateWithParams(src: Mat, dst: Mat, kernel: Mat, anchor: Point, iterations: c_int, borderType: c_int, borderValue: Scalar) void;
//     pub extern fn DistanceTransform(src: Mat, dst: Mat, labels: Mat, distanceType: c_int, maskSize: c_int, labelType: c_int) void;
//     pub extern fn Erode(src: Mat, dst: Mat, kernel: Mat) void;
//     pub extern fn ErodeWithParams(src: Mat, dst: Mat, kernel: Mat, anchor: Point, iterations: c_int, borderType: c_int) void;
//     pub extern fn MatchTemplate(image: Mat, templ: Mat, result: Mat, method: c_int, mask: Mat) void;
//     pub extern fn Moments(src: Mat, binaryImage: bool) struct_Moment;
//     pub extern fn PyrDown(src: Mat, dst: Mat, dstsize: Size, borderType: c_int) void;
//     pub extern fn PyrUp(src: Mat, dst: Mat, dstsize: Size, borderType: c_int) void;
//     pub extern fn BoundingRect(pts: PointVector) struct_Rect;
//     pub extern fn BoxPoints(rect: RotatedRect, boxPts: Mat) void;
//     pub extern fn ContourArea(pts: PointVector) f64;
//     pub extern fn MinAreaRect(pts: PointVector) struct_RotatedRect;
//     pub extern fn FitEllipse(pts: PointVector) struct_RotatedRect;
//     pub extern fn MinEnclosingCircle(pts: PointVector, center: [*c]Point2f, radius: [*c]f32) void;
//     pub extern fn FindContours(src: Mat, hierarchy: Mat, mode: c_int, method: c_int) PointsVector;
//     pub extern fn PointPolygonTest(pts: PointVector, pt: Point, measureDist: bool) f64;
//     pub extern fn ConnectedComponents(src: Mat, dst: Mat, connectivity: c_int, ltype: c_int, ccltype: c_int) c_int;
//     pub extern fn ConnectedComponentsWithStats(src: Mat, labels: Mat, stats: Mat, centroids: Mat, connectivity: c_int, ltype: c_int, ccltype: c_int) c_int;
//     pub extern fn GaussianBlur(src: Mat, dst: Mat, ps: Size, sX: f64, sY: f64, bt: c_int) void;
//     pub extern fn GetGaussianKernel(ksize: c_int, sigma: f64, ktype: c_int) Mat;
//     pub extern fn Laplacian(src: Mat, dst: Mat, dDepth: c_int, kSize: c_int, scale: f64, delta: f64, borderType: c_int) void;
//     pub extern fn Scharr(src: Mat, dst: Mat, dDepth: c_int, dx: c_int, dy: c_int, scale: f64, delta: f64, borderType: c_int) void;
//     pub extern fn GetStructuringElement(shape: c_int, ksize: Size) Mat;
//     pub extern fn MorphologyDefaultBorderValue(...) Scalar;
//     pub extern fn MorphologyEx(src: Mat, dst: Mat, op: c_int, kernel: Mat) void;
//     pub extern fn MorphologyExWithParams(src: Mat, dst: Mat, op: c_int, kernel: Mat, pt: Point, iterations: c_int, borderType: c_int) void;
//     pub extern fn MedianBlur(src: Mat, dst: Mat, ksize: c_int) void;
//     pub extern fn Canny(src: Mat, edges: Mat, t1: f64, t2: f64) void;
//     pub extern fn CornerSubPix(img: Mat, corners: Mat, winSize: Size, zeroZone: Size, criteria: TermCriteria) void;
//     pub extern fn GoodFeaturesToTrack(img: Mat, corners: Mat, maxCorners: c_int, quality: f64, minDist: f64) void;
//     pub extern fn GrabCut(img: Mat, mask: Mat, rect: Rect, bgdModel: Mat, fgdModel: Mat, iterCount: c_int, mode: c_int) void;
//     pub extern fn HoughCircles(src: Mat, circles: Mat, method: c_int, dp: f64, minDist: f64) void;
//     pub extern fn HoughCirclesWithParams(src: Mat, circles: Mat, method: c_int, dp: f64, minDist: f64, param1: f64, param2: f64, minRadius: c_int, maxRadius: c_int) void;
//     pub extern fn HoughLines(src: Mat, lines: Mat, rho: f64, theta: f64, threshold: c_int) void;
//     pub extern fn HoughLinesP(src: Mat, lines: Mat, rho: f64, theta: f64, threshold: c_int) void;
//     pub extern fn HoughLinesPWithParams(src: Mat, lines: Mat, rho: f64, theta: f64, threshold: c_int, minLineLength: f64, maxLineGap: f64) void;
//     pub extern fn HoughLinesPointSet(points: Mat, lines: Mat, lines_max: c_int, threshold: c_int, min_rho: f64, max_rho: f64, rho_step: f64, min_theta: f64, max_theta: f64, theta_step: f64) void;
//     pub extern fn Integral(src: Mat, sum: Mat, sqsum: Mat, tilted: Mat) void;
//     pub extern fn Threshold(src: Mat, dst: Mat, thresh: f64, maxvalue: f64, typ: c_int) f64;
//     pub extern fn AdaptiveThreshold(src: Mat, dst: Mat, maxValue: f64, adaptiveTyp: c_int, typ: c_int, blockSize: c_int, c: f64) void;
//     pub extern fn ArrowedLine(img: Mat, pt1: Point, pt2: Point, color: Scalar, thickness: c_int) void;
//     pub extern fn Circle(img: Mat, center: Point, radius: c_int, color: Scalar, thickness: c_int) void;
//     pub extern fn CircleWithParams(img: Mat, center: Point, radius: c_int, color: Scalar, thickness: c_int, lineType: c_int, shift: c_int) void;
//     pub extern fn Ellipse(img: Mat, center: Point, axes: Point, angle: f64, startAngle: f64, endAngle: f64, color: Scalar, thickness: c_int) void;
//     pub extern fn EllipseWithParams(img: Mat, center: Point, axes: Point, angle: f64, startAngle: f64, endAngle: f64, color: Scalar, thickness: c_int, lineType: c_int, shift: c_int) void;
//     pub extern fn Line(img: Mat, pt1: Point, pt2: Point, color: Scalar, thickness: c_int) void;
//     pub extern fn Rectangle(img: Mat, rect: Rect, color: Scalar, thickness: c_int) void;
//     pub extern fn RectangleWithParams(img: Mat, rect: Rect, color: Scalar, thickness: c_int, lineType: c_int, shift: c_int) void;
//     pub extern fn FillPoly(img: Mat, points: PointsVector, color: Scalar) void;
//     pub extern fn FillPolyWithParams(img: Mat, points: PointsVector, color: Scalar, lineType: c_int, shift: c_int, offset: Point) void;
//     pub extern fn Polylines(img: Mat, points: PointsVector, isClosed: bool, color: Scalar, thickness: c_int) void;
//     pub extern fn GetTextSize(text: [*c]const u8, fontFace: c_int, fontScale: f64, thickness: c_int) struct_Size;
//     pub extern fn GetTextSizeWithBaseline(text: [*c]const u8, fontFace: c_int, fontScale: f64, thickness: c_int, baseline: [*c]c_int) struct_Size;
//     pub extern fn PutText(img: Mat, text: [*c]const u8, org: Point, fontFace: c_int, fontScale: f64, color: Scalar, thickness: c_int) void;
//     pub extern fn PutTextWithParams(img: Mat, text: [*c]const u8, org: Point, fontFace: c_int, fontScale: f64, color: Scalar, thickness: c_int, lineType: c_int, bottomLeftOrigin: bool) void;
//     pub extern fn Resize(src: Mat, dst: Mat, sz: Size, fx: f64, fy: f64, interp: c_int) void;
//     pub extern fn GetRectSubPix(src: Mat, patchSize: Size, center: Point, dst: Mat) void;
//     pub extern fn GetRotationMatrix2D(center: Point, angle: f64, scale: f64) Mat;
//     pub extern fn WarpAffine(src: Mat, dst: Mat, rot_mat: Mat, dsize: Size) void;
//     pub extern fn WarpAffineWithParams(src: Mat, dst: Mat, rot_mat: Mat, dsize: Size, flags: c_int, borderMode: c_int, borderValue: Scalar) void;
//     pub extern fn WarpPerspective(src: Mat, dst: Mat, m: Mat, dsize: Size) void;
//     pub extern fn WarpPerspectiveWithParams(src: Mat, dst: Mat, rot_mat: Mat, dsize: Size, flags: c_int, borderMode: c_int, borderValue: Scalar) void;
//     pub extern fn Watershed(image: Mat, markers: Mat) void;
//     pub extern fn ApplyColorMap(src: Mat, dst: Mat, colormap: c_int) void;
//     pub extern fn ApplyCustomColorMap(src: Mat, dst: Mat, colormap: Mat) void;
//     pub extern fn GetPerspectiveTransform(src: PointVector, dst: PointVector) Mat;
//     pub extern fn GetPerspectiveTransform2f(src: Point2fVector, dst: Point2fVector) Mat;
//     pub extern fn GetAffineTransform(src: PointVector, dst: PointVector) Mat;
//     pub extern fn GetAffineTransform2f(src: Point2fVector, dst: Point2fVector) Mat;
//     pub extern fn FindHomography(src: Mat, dst: Mat, method: c_int, ransacReprojThreshold: f64, mask: Mat, maxIters: c_int, confidence: f64) Mat;
//     pub extern fn DrawContours(src: Mat, contours: PointsVector, contourIdx: c_int, color: Scalar, thickness: c_int) void;
//     pub extern fn DrawContoursWithParams(src: Mat, contours: PointsVector, contourIdx: c_int, color: Scalar, thickness: c_int, lineType: c_int, hierarchy: Mat, maxLevel: c_int, offset: Point) void;
//     pub extern fn Sobel(src: Mat, dst: Mat, ddepth: c_int, dx: c_int, dy: c_int, ksize: c_int, scale: f64, delta: f64, borderType: c_int) void;
//     pub extern fn SpatialGradient(src: Mat, dx: Mat, dy: Mat, ksize: c_int, borderType: c_int) void;
//     pub extern fn Remap(src: Mat, dst: Mat, map1: Mat, map2: Mat, interpolation: c_int, borderMode: c_int, borderValue: Scalar) void;
//     pub extern fn Filter2D(src: Mat, dst: Mat, ddepth: c_int, kernel: Mat, anchor: Point, delta: f64, borderType: c_int) void;
//     pub extern fn SepFilter2D(src: Mat, dst: Mat, ddepth: c_int, kernelX: Mat, kernelY: Mat, anchor: Point, delta: f64, borderType: c_int) void;
//     pub extern fn LogPolar(src: Mat, dst: Mat, center: Point, m: f64, flags: c_int) void;
//     pub extern fn FitLine(pts: PointVector, line: Mat, distType: c_int, param: f64, reps: f64, aeps: f64) void;
//     pub extern fn LinearPolar(src: Mat, dst: Mat, center: Point, maxRadius: f64, flags: c_int) void;
//     pub extern fn ClipLine(imgSize: Size, pt1: Point, pt2: Point) bool;
//     pub extern fn CLAHE_Create(...) CLAHE;
//     pub extern fn CLAHE_CreateWithParams(clipLimit: f64, tileGridSize: Size) CLAHE;
//     pub extern fn CLAHE_Close(c: CLAHE) void;
//     pub extern fn CLAHE_Apply(c: CLAHE, src: Mat, dst: Mat) void;
//     pub extern fn InvertAffineTransform(src: Mat, dst: Mat) void;
//     pub extern fn PhaseCorrelate(src1: Mat, src2: Mat, window: Mat, response: [*c]f64) Point2f;
//     pub extern fn Mat_Accumulate(src: Mat, dst: Mat) void;
//     pub extern fn Mat_AccumulateWithMask(src: Mat, dst: Mat, mask: Mat) void;
//     pub extern fn Mat_AccumulateSquare(src: Mat, dst: Mat) void;
//     pub extern fn Mat_AccumulateSquareWithMask(src: Mat, dst: Mat, mask: Mat) void;
//     pub extern fn Mat_AccumulateProduct(src1: Mat, src2: Mat, dst: Mat) void;
//     pub extern fn Mat_AccumulateProductWithMask(src1: Mat, src2: Mat, dst: Mat, mask: Mat) void;
//     pub extern fn Mat_AccumulatedWeighted(src: Mat, dst: Mat, alpha: f64) void;
//     pub extern fn Mat_AccumulatedWeightedWithMask(src: Mat, dst: Mat, alpha: f64, mask: Mat) void;
